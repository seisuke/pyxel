pub const PYXEL_TS_TEMPLATE: &str = r#"// Auto-generated by pyxel-wrapper-ts-bindgen
import { instance, ready } from './instance.js';

/**
 * Color value (0â€“255, corresponds to Rust's `u8`)
 */
type Color = number;

/**
 * Rgb24 value (0xRRGGBB, corresponds to Rust's `u32`)
 * Example: `0xff0000` for red
 */
type Rgb24 = number;

async function fetchAndLoadResource(filename: string) {
  const res = await fetch(filename.startsWith("./") ? filename : `./${filename}`);
  const data = await res.arrayBuffer();
  const bytes = new Uint8Array(data);
  instance.FS.writeFile(filename, bytes);
}

{%- for module in modules %}

const _fns = new Proxy<Record<string, any>>({
  defineFn(name: string, returnType?: string, argTypes?: string[]) {
    _fns[name] = instance.cwrap(name, returnType, argTypes);
    this[name] = _fns[name];
    return this[name];
  }
}, {
  get(target, prop: string) {
    if (!(prop in target)) {
      {%- for func in module.functions %}
      {{ func.meta.proxy_definefn | default(value="") }}
      {%- endfor %}      
    }
    return target[prop];
  }
});

let cachedImageList: any = null;

/**
 * TypeScript classes for Pyxel classes
 */
{%- for class in module.classes %}
class {{ class.name }} {
  constructor(private ptr: number) {}
  {%- for method in class.methods %}
  {%- if method.name == "new" %}
  {%- elif method.name == "get" %}
  get(index: number): Image {
    const ptr = (instance as any)._{{ class.name }}_get(this.ptr, index);
    return new Image(ptr);
  }
  {%- else %}
  {{ method.name }}({{ method.meta.ts_decl_args | default(value="") }}): {{ method.return_type }} {
    return (instance as any)._{{ class.name }}_{{ method.name }}(this.ptr{% if method.meta.ts_decl_args is defined and method.meta.ts_decl_args != "" %}, {{ method.meta.ts_decl_args | default(value="") }}{% endif %});
  }
  {%- endif %}
  {%- endfor %}
}
{%- endfor %}

export const pyxel = {
  {%- for func in module.functions %}
  {%- if func.meta.getter_array %}
    get {{ func.name }}(): {{ func.return_type }} {
      if (!cachedImageList) {
        const ptr = (instance as any)._{{ func.name }}();
        cachedImageList = new ImageList(ptr);
      }
      return cachedImageList;
    },
  {%- elif func.meta.is_async %}
    async {{ func.name }}({{ func.meta.ts_decl_args }}): Promise<{{ func.return_type }}> {
      {{ func.meta.wrapper_call }}
    },
  {%- else %}
    {{ func.name }}({{ func.meta.ts_decl_args }}): {{ func.return_type }} {
      {{ func.meta.wrapper_call }}
    },
  {%- endif %}
  {%- endfor %}
  {%- for class in module.classes %}
  {{ class.name }}: typeof {{ class.name }},
  {%- endfor %}
};

{%- endfor %}

export { ready };"#;

pub const WRAPPER_RS_TEMPLATE: &str = r#"// Auto-generated wrapper functions

use std::ffi::CStr;
use crate::image_wrapper::image_wrapper::Image;
use crate::resouce_wrapper::resouce_wrapper::ImageList;

{%- for module in modules %}
{%- for function in module.functions %}
#[no_mangle]
pub extern "C" fn {{ function.name }}(
    {%- for arg in function.args %}
    {{ arg.0 }}: {{ arg_type_rust(typ=arg.1) }}{% if not loop.last %}, {% endif %}
    {%- endfor %}
) -> {% if function.return_type == "void" %}() {% else %}{{ function.return_type }}{% endif %} {
    {%- if function.meta.arg_cast_lines %}
    {{ function.meta.arg_cast_lines }}
    {%- endif %}

    {%- if function.meta.custom_return %}
    {{ function.meta.custom_return  }}
    {%- else %}
    crate::{{ module.name }}::{{ function.name }}({%- for arg in function.args %}{{ arg.0 }}{% if not loop.last %}, {% endif %}{%- endfor %})
    {%- endif %}
}
{%- endfor %}

{%- for class in module.classes %}
{%- for method in class.methods %}
{%- if method.name == "new" %}
#[no_mangle]
pub extern "C" fn {{ class.name }}_new(
    {%- for arg in method.args %}
    {{ arg.0 }}: {{ arg_type_rust(typ=arg.1) }}{% if not loop.last %}, {% endif %}
    {%- endfor %}
) -> *mut {{ class.name }} {

    {%- if method.meta.arg_cast_lines %}
    {{ method.meta.arg_cast_lines }}
    {%- endif %}

    let instance = {{ class.name }}::new(
        {%- for arg in method.args %}{{ arg.0 }}{% if not loop.last %}, {% endif %}{%- endfor %}
    );

    Box::into_raw(Box::new(instance))
}
{%- else %}
#[no_mangle]
pub extern "C" fn {{ class.name }}_{{ method.name }}(ptr: *const {{ class.name }}, {% if method.name == "get" %} index: usize{% endif %}) -> {{ method.return_type }} {
    {%- if method.name != "get" %} 
    let value = unsafe { &*ptr }.{{ method.name }}();
    {%- else %}
    let list = unsafe { &*ptr };
    if index >= list.len() {
        return std::ptr::null_mut();
    }

    let item = list.get(index);
    Box::into_raw(Box::new(item))
    {%- endif %}
    {%- if method.return_type == "u32" %}
    value.try_into().unwrap_or(u32::MAX)
    {%- elif method.name == "get" %} 
    {%- else %}
    value
    {%- endif %}
}
{%- endif %}
{%- endfor %}
{%- endfor %}
{%- endfor %}
"#;
