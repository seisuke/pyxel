pub const DTS_TEMPLATE: &str = r#"{%- for module in modules %}
declare module "{{ module.name }}" {

  /**
   * Color value (0–255, corresponds to Rust's `u8`)
   */
  type Color = number;
  /**
   * Rgb24 value (0xRRGGBB, corresponds to Rust's `u32`)
   * Example: `0xff0000` for red
   */
  type Rgb24 = number;

  export const pyxel: {
    {%- for func in module.functions %}
    {{ func.name }}({% for arg in func.args %}{{ arg.0 }}: {{ arg.1 }}{% if not loop.last %}, {% endif %}{% endfor %}): {{ func.return_type }};
    {%- endfor %}

    {%- for class in module.classes %}
    {{ class.name }}: {
      {%- set ctors = class.methods | filter(attribute="name", value="new") %}
      {%- set ctor = ctors[0] %}
      new({% for arg in ctor.args %}{{ arg.0 }}: {{ arg.1 }}{% if not loop.last %}, {% endif %}{% endfor %}): {
        {%- for method in class.methods %}
        {%- if method.name != "new" %}
        {{ method.name }}(): {{ method.return_type }};
        {%- endif %}
        {%- endfor %}
      };
    };
    {%- endfor %}
  };
}
{%- endfor %}
"#;

pub const PYXEL_TS_TEMPLATE: &str = r#"/// <reference types="./pyxel_wrapper_ts" />
// Auto-generated by pyxel-wrapper-ts-bindgen
import { instancePromise } from './instance.js';

let instance: WebAssembly.Exports;
const ready = instancePromise.then((inst: { exports: WebAssembly.Exports }) => {
  instance = inst.exports;
});

/**
 * Color value (0–255, corresponds to Rust's `u8`)
 */
type Color = number;
/**
 * Rgb24 value (0xRRGGBB, corresponds to Rust's `u32`)
 * Example: `0xff0000` for red
 */
type Rgb24 = number;


{%- for module in modules %}
{%- for class in module.classes %}
class {{ class.name }} {
  {%- set ctors = class.methods | filter(attribute="name", value="new") %}
  {%- set ctor = ctors[0] %}
  constructor({% for arg in ctor.args %}public {{ arg.0 }}Value: {{ arg.1 }}{% if not loop.last %}, {% endif %}{% endfor %}) {}
  {%- for method in class.methods %}
  {%- if method.name != "new" %}
  {{ method.name }}(): {{ method.return_type }} {
    return this.{{ method.name }}Value;
  }
  {%- endif %}
  {%- endfor %}
}
{%- endfor %}

export const pyxel: typeof import("{{ module.name }}").pyxel = {
  {%- for func in module.functions %}
  {{ func.name }}({% for arg in func.args %}{{ arg.0 }}: {{ arg.1 }}{% if not loop.last %}, {% endif %}{% endfor %}) {
    return (instance as any)._{{ func.name }}({% for arg in func.args %}{{ arg.0 }}{% if not loop.last %}, {% endif %}{% endfor %});
  },
  {%- endfor %}
  {%- for class in module.classes %}
  {{ class.name }},
  {%- endfor %}
};
export { ready };
{%- endfor %}
"#;

pub const WRAPPER_RS_TEMPLATE: &str = r#"// Auto-generated wrapper functions

use std::ffi::CStr;
use crate::pyxel::Image;

{%- for module in modules %}
{%- for function in module.functions %}
#[no_mangle]
pub extern "C" fn {{ function.name }}(
    {%- for arg in function.args %}
    {{ arg.0 }}: {{ arg_type_rust(typ=arg.1) }}{% if not loop.last %}, {% endif %}
    {%- endfor %}
) {
    {%- if function.meta.arg_cast_lines %}
    {{ function.meta.arg_cast_lines }}
    {%- endif %}
    crate::{{ module.name }}::{{ function.name }}(
        {%- for arg in function.args %}{{ arg.0 }}{% if not loop.last %}, {% endif %}{%- endfor %})
}
{%- endfor %}

{%- for class in module.classes %}
{%- for method in class.methods %}
{%- if method.name == "new" %}
#[no_mangle]
pub extern "C" fn {{ class.name }}_new(
    {%- for arg in method.args %}
    {{ arg.0 }}: {{ arg_type_rust(typ=arg.1) }}{% if not loop.last %}, {% endif %}
    {%- endfor %}
) -> *mut {{ class.name }} {
    {%- if method.meta.arg_cast_lines %}
    {{ method.meta.arg_cast_lines }}
    {%- endif %}
    Box::into_raw(Box::new(crate::{{ module.name }}::{{ class.name }}::new(
        {%- for arg in method.args %}{{ arg.0 }}{% if not loop.last %}, {% endif %}{%- endfor %})))
}
{%- else %}
#[no_mangle]
pub extern "C" fn {{ class.name }}_{{ method.name }}(ptr: *const {{ class.name }}) -> i32 {
    unsafe { &*ptr }.{{ method.name }}()
}
{%- endif %}
{%- endfor %}
{%- endfor %}
{%- endfor %}
"#;
